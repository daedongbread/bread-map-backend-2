buildscript {
    ext {
        queryDslVersion = "5.0.0"
    }
}

plugins {
    id 'org.springframework.boot' version '2.6.3'
    id 'io.spring.dependency-management' version '1.0.11.RELEASE'
    id 'org.asciidoctor.jvm.convert' version '3.3.2'
    id 'java'
//    id "com.ewerk.gradle.plugins.querydsl" version "1.0.10"
}

group = 'com.depromeet'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '17'

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
    asciidoctorExt
}

repositories {
    mavenCentral()
    jcenter()
    google()
}

ext {
    set('snippetsDir', file("build/generated-snippets"))
    set('springCloudVersion', "2021.0.1")
}

jar {
    enabled = false
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa:2.6.3'
    implementation 'org.springframework.boot:spring-boot-starter-oauth2-client:2.6.3'
    implementation 'org.springframework.boot:spring-boot-starter-security:2.6.3'

    implementation "com.querydsl:querydsl-core"  // querydsl
    implementation "com.querydsl:querydsl-jpa"  // querydsl
    implementation "com.querydsl:querydsl-apt"  // querydsl
    annotationProcessor "com.querydsl:querydsl-apt:${dependencyManagement.importedProperties['querydsl.version']}:jpa"
    // querydsl JPAAnnotationProcessor 사용 지정
    annotationProcessor "jakarta.persistence:jakarta.persistence-api"
    annotationProcessor "jakarta.annotation:jakarta.annotation-api"

    implementation 'org.springframework.boot:spring-boot-starter-actuator:2.6.3'

    runtimeOnly 'com.h2database:h2:1.4.200'
    implementation 'org.springframework.boot:spring-boot-starter-validation:2.6.3'
    implementation 'org.springframework.boot:spring-boot-starter-web:2.6.3'
    compileOnly 'org.projectlombok:lombok:1.18.22'
    runtimeOnly 'mysql:mysql-connector-java:8.0.28'
    implementation 'mysql:mysql-connector-java:8.0.28'
    annotationProcessor 'org.projectlombok:lombok:1.18.22'
    testImplementation 'org.springframework.boot:spring-boot-starter-test:2.6.3'
    testImplementation 'org.springframework.restdocs:spring-restdocs-mockmvc:2.0.7.RELEASE'
    testImplementation 'org.springframework.security:spring-security-test:5.6.1'

    implementation 'org.springframework.boot:spring-boot-starter-aop:2.6.3'

    testCompileOnly 'org.projectlombok:lombok:1.18.22'
    testAnnotationProcessor 'org.projectlombok:lombok:1.18.22'

    annotationProcessor "org.springframework.boot:spring-boot-configuration-processor:2.6.3"

    // jwt
    implementation 'io.jsonwebtoken:jjwt-api:0.11.2'
    runtimeOnly 'io.jsonwebtoken:jjwt-impl:0.11.2'
    runtimeOnly 'io.jsonwebtoken:jjwt-jackson:0.11.2'
    // jwk
    implementation 'com.auth0:jwks-rsa:0.22.0'

    testImplementation 'org.springframework.restdocs:spring-restdocs-mockmvc'
    asciidoctorExt 'org.springframework.restdocs:spring-restdocs-asciidoctor'
    // S3
    implementation group: 'org.springframework.cloud', name: 'spring-cloud-starter-aws', version: '2.2.1.RELEASE'
    implementation 'com.googlecode.json-simple:json-simple:1.1.1'
    implementation 'com.google.code.gson:gson:2.8.9'
    // Minio
    implementation 'io.minio:minio:8.3.3'
    // mock3S
    testImplementation 'io.findify:s3mock_2.13:0.2.6'
    // redis
    implementation 'org.springframework.boot:spring-boot-starter-data-redis:2.6.3'
    // embedded-redis
    implementation(group: 'it.ozimov', name: 'embedded-redis', version: '0.7.2')
    // FCM push
    implementation 'com.google.firebase:firebase-admin:6.8.1'
    // OpenFeign
    implementation "org.springframework.cloud:spring-cloud-starter-openfeign:3.1.0"
    // JsonPath
    implementation "com.jayway.jsonpath:json-path:2.5.0"

    // easy random
    testImplementation 'org.jeasy:easy-random-core:5.0.0'

    testImplementation 'org.testcontainers:testcontainers:1.17.2'

    testImplementation 'org.testcontainers:junit-jupiter:1.17.2'

    testImplementation 'org.mockito:mockito-inline:3.6.0'

    // flyway
    implementation 'org.flywaydb:flyway-core:8.4.4'
    implementation 'org.flywaydb:flyway-mysql:8.4.4'
}

tasks.named('test') {
    outputs.dir snippetsDir
    useJUnitPlatform()
}

tasks.named('asciidoctor') {
    inputs.dir snippetsDir
    configurations 'asciidoctorExt'
    dependsOn test
}

asciidoctor.doFirst {
    delete file('src/main/resources/static/docs')
}

task copyDocument(type: Copy) {
    dependsOn asciidoctor

    from file("build/docs/asciidoc/")
    into file("src/main/resources/static/docs")
}

build {
    dependsOn copyDocument
}

def querydslSrcDir = "src/main/generated"
sourceSets {
    main {
        java {
            srcDirs += [querydslSrcDir]
        }
    }
}

compileJava {
    options.compilerArgs << '-Aquerydsl.generatedAnnotationClass=javax.annotation.Generated'
}

tasks.withType(JavaCompile) {
    options.generatedSourceOutputDirectory = file(querydslSrcDir)
}

clean {
    delete file(querydslSrcDir)
}

dependencyManagement {
    imports {
        mavenBom "org.springframework.cloud:spring-cloud-dependencies:$springCloudVersion"
    }
}