name: PROD_CD

on:
  push:
    branches:
      - main
    paths-ignore:
      - '.github/ISSUE_TEMPLATE/**'
      - '.github/pull_request_template.md'
      - 'README.md'
  workflow_dispatch:

env:
  AWS_REGION: ap-northeast-2
  ECR_REPOSITORY: prod-daedong-api
  ECS_TASK_DEFINITION: daedong-api
  CONTAINER_NAME: daedong-api
  ECS_SERVICE: daedong-api
  ECS_CLUSTER: prod-daedong
  IMAGE_TAG_NAME: api_image_tag


permissions:
  id-token: write
  contents: read
  actions: read

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        role-to-assume: arn:aws:iam::590183743745:role/prod-GithubActionsRole
        aws-region: ${{ env.AWS_REGION }}

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    - name: Set up JDK 17
      uses: actions/setup-java@v2
      with:
        distribution: 'adopt'
        java-version: 17
        cache: gradle

    - name: Cache gradle modules
      uses: actions/cache@v3
      with:
        path: |
          ~/.gradle/caches
          ~/.gradle/wrapper
        key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
        restore-keys: |
          ${{ runner.os }}-gradle-

    - name: Build with Gradle
      run: |
        chmod +x ./gradlew
        ./gradlew build

    - name: Set up docker buildx
      id: buildx
      uses: docker/setup-buildx-action@v2

    - name: Cache docker layers
      uses: actions/cache@v2
      with:
        path: /tmp/.buildx-cache
        key: ${{ runner.os }}-buildx-${{ github.sha }}
        restore-keys: |
          ${{ runner.os }}-buildx-

    - name: Build, tag, and push image to Amazon ECR
      id: build-image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        ECR_REPOSITORY: ${{ env.ECR_REPOSITORY }}
        IMAGE_TAG: ${{ github.sha }}
      run: |
        docker buildx create --use
        docker buildx build --platform linux/amd64,linux/arm64 --tag $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG --push .
        echo "IMAGE_TAG=$IMAGE_TAG" >> $GITHUB_OUTPUT

    - name: Checkout Infra Repository
      uses: actions/checkout@v3
      with:
        path: terraform
        repository: 'daedongbread/bread-map-infra'
        token: ${{ secrets.INFRA_REPO_ACCESS_TOKEN }}
        ref: stage

    - name: Update Image Tag
      env:
        IMAGE_TAG_NAME: ${{ env.IMAGE_TAG_NAME }}
        IMAGE_TAG: ${{ steps.build-image.outputs.IMAGE_TAG }}
      working-directory: terraform/root/prod
      run: |
        sed -i "s/${IMAGE_TAG_NAME} = \".*\"/${IMAGE_TAG_NAME} = \"$IMAGE_TAG\"/" prod.tfvars

    - name: Commit and Push and Create PR
      env:
        GITHUB_TOKEN: ${{ secrets.INFRA_REPO_ACCESS_TOKEN }}
        GITHUB_ACTOR: ${{ github.actor }}
        PR_URL: ${{ github.event.pull_request.html_url }}
      working-directory: terraform/root/prod
      run: |
        git config user.name 'daedong'
        git config user.email 'daedong@daedong.com'
        git add prod.tfvars
        git commit -m "deploy: update api image tag"
        git push origin stage
        
        echo ${{ github.event_name }}
        if [[ "${{ github.event_name }}" == "pull_request" ]]; then
          PR_BODY="Automated PR to deploy **[API]** by update image tag<br/><br/><br/>open by $PR_URL @$GITHUB_ACTOR"
        elif [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
          PR_BODY="Automated PR to deploy **[API]** by update image tag<br/><br/><br/>open by workflow_dispatch by @$GITHUB_ACTOR"
        fi
        echo "$PR_BODY" > pr-body.txt
        gh pr create --title "API 운영 환경 배포" --body-file pr-body.txt --base main --head stage

    - name: CD notification to Slack
      uses: 8398a7/action-slack@v3
      with:
        status: ${{ job.status }}
        fields: repo,message,commit,author,action,eventName,ref,workflow,job,took
        author_name: Backend CD
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
